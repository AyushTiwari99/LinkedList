/*
You are given the head of a linked list. Delete the middle node, and return the head of the modified linked list.
The middle node of a linked list of size n is the ⌊n / 2⌋th node from the start using 0-based indexing, where ⌊x⌋ denotes the largest integer less than or equal to x.
For n = 1, 2, 3, 4, and 5, the middle nodes are 0, 1, 1, 2, and 2, respectively. Note - Also take the size of Linked List as input.
Input Format
First input is an Integer N. Followed by N nodes of the linked list.
Constraints
The number of nodes in the list is in the range [1, 105]. 1 <= Node.val <= 105
Output Format
Space separated values with the middle node removed.
Sample Input 0
7
1 3 4 7 1 2 6
Sample Output 0
1 3 4 1 2 6
Explanation 0
The above figure represents the given linked list. The indices of the nodes are written below. Since n = 7, node 3 with value 7 is the middle node, which is marked in red. We return the new list after removing this node.
*/
import java.util.*;
class Node
{
    int data;
    Node next;
    Node(int data)
    {this.data =data;}
}
public class Solution {
    Node head;
    public int count()
    {
        if(head==null) return 0;
        Node temp=head;
        int c=0;
        while(temp!=null)
        {
            c++;
            temp=temp.next;
        }
        return c;
    }
    public void insertatlast(Node newNode)
    {
        if(head==null)
        {head=newNode;}


        else{
            Node temp = head;
            while(temp.next!=null)
            {
                temp=temp.next;
            }
            temp.next=newNode;
        }
    }
    public void deleteAtMid(int k)
    {
        if(k==1)
        {
            if(head==null)
            {
                System.out.println("Can't Delete");
            }
            if(head.next==null) head=head.next;
        }
        else if(k>count())
        {
            System.out.println("Invalid Position");
        }
        else
        {
            Node temp = head;
            for (int i = 0; i < k-2; i++)
            {
                temp=temp.next;
            }
            temp.next = temp.next.next;

        }
    }
    public void display() {
        if (head == null) {
            System.out.println("list is empty");
        } else {
            Node temp = head;
            while (temp != null) {
                System.out.print(temp.data+" ");
                temp = temp.next;
            }
        }
    }
    public static void main(String[] args)
    {
        Solution obj = new Solution();
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        for(int i=0; i<n; i++){
            obj.insertatlast(new Node(sc.nextInt()));
        }
        int k =0;
        if(obj.count()/2 == 0) k = obj.count()/2;
        else k = obj.count()/2 + 1;
        obj.deleteAtMid(k);
        obj.display();
    }
}
